<?php

namespace Wc\UserBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Wc\UserBundle\Entity;

/**
 * Bet
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Bet extends EntityRepository
{

    const KNOCKOUT = 'knockout';

    private function loadBets(Entity\User $user)
    {
        return $this->findBy(array('user' => $user->getId()));
    }

    public function getBets(Entity\User $user = null)
    {
        if ($user === null) {
            return null;
        }

        $bets = $this->loadBets($user);
        $output = array();
        foreach($bets as $bet) {
            /** @var Entity\Bet $bet */
            $knockout = $bet->getKnockout();
            if ($knockout !== null) {
                $output[$knockout->getMatchid()] = $bet->getBet();
            } else {
                $output[$bet->getGame()->getMatchid()] = $bet->getBet();
            }
        }

        return $output;
    }

    public function findBet($type, $matchid, Entity\User $user)
    {
        $bets = $this->loadBets($user);
        foreach($bets as $bet) {
            /** @var Entity\Bet $bet */
            if ($type == self::KNOCKOUT) {
                if ($bet->getKnockout() === null) {
                    continue;
                } elseif ($bet->getKnockout()->getMatchid() == $matchid) {
                    if (! $bet->getKnockout()->getIsStarted()) {
                        return $bet;
                    } else {
                        return false;
                    }
                }
            } else {
                if ($bet->getGame() !== null && $bet->getGame()->getMatchid() == $matchid) {
                    if (! $bet->getGame()->getIsStarted()) {
                        return $bet;
                    } else {
                        return false;
                    }
                }
            }
        }

        return null;

    }

    public function setCorrect()
    {
        $bets = $this->findBy(array('correct' => null));
        foreach ($bets as $bet) {
            /** @var Entity\Bet $bet */
            if ($bet->getGame() !== null) {
                $game = $bet->getGame();
            } else {
                $game = $bet->getKnockout();
            }
            if ($game->getIsFinish()) {
                $bet->setCorrect($game->getWinnerByBet($bet->getBet()));
                $this->getEntityManager()->persist($bet);
            }
        }

        $this->getEntityManager()->flush();

    }

    public function getToplist($type)
    {

    }

}
