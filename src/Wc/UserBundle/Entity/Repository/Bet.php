<?php

namespace Wc\UserBundle\Entity\Repository;

use Symfony\Component\HttpFoundation\Session\Flash\FlashBagInterface;
use Wc\UserBundle\Entity;

/**
 * Bet
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Bet extends Top
{

    const KNOCKOUT = 'knockout';

    private function loadBets(Entity\User $user)
    {
        return $this->findBy(array('user' => $user->getId()));
    }

    public function getBets(Entity\User $user = null)
    {
        if ($user === null) {
            return null;
        }

        $bets = $this->loadBets($user);
        $output = array();
        foreach($bets as $bet) {
            /** @var Entity\Bet $bet */
            $knockout = $bet->getKnockout();
            if ($knockout !== null) {
                $output[$knockout->getMatchid()] = $bet;
            } else {
                $output[$bet->getGame()->getMatchid()] = $bet;
            }
        }

        return $output;
    }

    public function findBet($type, $matchid, Entity\User $user)
    {
        $bets = $this->loadBets($user);
        foreach($bets as $bet) {
            /** @var Entity\Bet $bet */
            if ($type == self::KNOCKOUT) {
                if ($bet->getKnockout() === null) {
                    continue;
                } elseif ($bet->getKnockout()->getMatchid() == $matchid) {
                    if (! $bet->getKnockout()->getIsStarted()) {
                        return $bet;
                    } else {
                        return false;
                    }
                }
            } else {
                if ($bet->getGame() !== null && $bet->getGame()->getMatchid() == $matchid) {
                    if (! $bet->getGame()->getIsStarted()) {
                        return $bet;
                    } else {
                        return false;
                    }
                }
            }
        }

        return null;

    }

    public function setCorrect()
    {
        $bets = $this->findBy(array('correct' => null));
        foreach ($bets as $bet) {
            /** @var Entity\Bet $bet */
            if ($bet->getGame() !== null) {
                $game = $bet->getGame();
            } else {
                $game = $bet->getKnockout();
            }
            if ($game->getIsFinish()) {
                $bet->setCorrect($game->getWinnerByBet($bet->getBet()));
                if ($bet->getCorrect()) {
                    $bet->getUser()->setPoints($bet->getUser()->getPoints() + ($bet->getPoints()));
                } else {
                    $bet->getUser()->setPoints($bet->getUser()->getPoints() - ($bet->getPoints()));
                }
                $this->getEntityManager()->persist($bet);
            }
        }

        $this->getEntityManager()->flush();

    }
    
    public function getTopBets($page, $prpage = 100)
    {
        
    }

    public function setBets(Entity\User $user, $bets, FlashBagInterface $flashbag)
    {
        foreach ($bets as $type => $bet) {
            if ($type == 'point') {
                continue;
            }

            foreach ($bet as $matchid => $method) {
                $points = $this->checkPoints($bets['point'], $matchid);
                if ($points !== false) {
                    $obj = $this->findBet($type, $matchid, $user);
                    if ($obj === null) {
                        $obj = new Entity\Bet();
                        $obj->setUser($user);
                        if ($type == Entity\Repository\Bet::KNOCKOUT) {
                            $mm = $this->getEntityManager()->getRepository('WcGameBundle:Knockout')->findOneBy(array('matchid' => $matchid));
                            $obj->setKnockout($mm);
                        } else {
                            $mm = $this->getEntityManager()->getRepository('WcGameBundle:Game')->findOneBy(array('matchid' => $matchid));
                            $obj->setGame($mm);
                        }
                    } elseif ($obj === false) {
                        $flashbag->add('info', 'Match is already started, bet could not be saved');
                        continue;
                    }

                    $obj->setPoints($points);
                    $obj->setBet($method);
                    $this->getEntityManager()->persist($obj);

                } else {
                    $flashbag->add('info', 'Points are not correct set for the match');
                }
            }
        }

        $this->getEntityManager()->flush();
        $flashbag->add('success', 'Your bets are now saved');
    }

    private function checkPoints(array $points, $matchid)
    {
        if (array_key_exists($matchid, $points)) {
            $p = $points[$matchid];
            if ($p > 1 && $p <= 250) {
                return $p;
            }
        }

        return false;

    }

}
